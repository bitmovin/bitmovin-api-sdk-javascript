import {map, mapArray} from '../common/Mapper';
import StreamPerTitleFixedResolutionAndBitrateSettings from './StreamPerTitleFixedResolutionAndBitrateSettings';

/**
 * @export
 * @class StreamPerTitleSettings
 */
export class StreamPerTitleSettings {
  /**
   * Settings for PER_TITLE_TEMPLATE_FIXED_RESOLUTION_AND_BITRATE mode
   * @type {StreamPerTitleFixedResolutionAndBitrateSettings}
   * @memberof StreamPerTitleSettings
   */
  public fixedResolutionAndBitrateSettings?: StreamPerTitleFixedResolutionAndBitrateSettings;

  /**
   * This factor is used to calculate the maxBitrate of the codec configuration for the generated representation as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the 'codecMaxBitrateFactor' from the pertitleStartConfiguration. This value will only have an impact on streams with h264 or h265 video configurations.
   * @type {number}
   * @memberof StreamPerTitleSettings
   */
  public codecMaxBitrateFactor?: number;

  /**
   * This factor is used to calculate the bufsize of the codec configuration for the generated representations as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the 'codecBufsizeFactor' from the pertitleStartConfiguration.. This value will only have an impact on streams with h264 or h265 video configurations.
   * @type {number}
   * @memberof StreamPerTitleSettings
   */
  public codecBufsizeFactor?: number;

  constructor(obj?: Partial<StreamPerTitleSettings>) {
    if(!obj) {
      return;
    }
    this.fixedResolutionAndBitrateSettings = map(obj.fixedResolutionAndBitrateSettings, StreamPerTitleFixedResolutionAndBitrateSettings);
    this.codecMaxBitrateFactor = map(obj.codecMaxBitrateFactor);
    this.codecBufsizeFactor = map(obj.codecBufsizeFactor);
  }
}

export default StreamPerTitleSettings;

